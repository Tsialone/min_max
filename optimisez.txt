from datetime import time
from objets.Player import Player
from form.Teboka import Teboka

from fonction.Data import Data
from fonction.Fonction import Fonction

import copy


# objet_clone = copy.deepcopy(mon_objet)
class Node:
    nodes_founds = []

    def __init__(self, parent, list_player, index_tour, list_boxs, generation):
        self.__children = []
        self.__generation = generation
        self.__index_tour = copy.deepcopy(index_tour)
        self.setBoxs(copy.deepcopy(list_boxs))
        self.__list_player = copy.deepcopy(list_player)
        self.__parent = parent

   
        
        
    def getBoxs(self):
        return self.__boxs

    def setBoxs(self, list__box):
        self.__boxs = list__box

    def getGeneration(self):
        return self.__generation

    def setGeneration(self, generation):
        self.__generation = generation

    def copyPlayer(self, list_player):
        for player in list_player:
            self.__list_player.append(player)

    def getIndexTour(self):
        return self.__index_tour

    def setIndexTour(self, index):
        self.__index_tour = index

    def getTable(self):
        return self.__table

    def setTable(self, table):
        self.__table = table

    def addChild(self, node_child):
        self.__children.append(node_child)

    def getParent(self):
        return self.__parent

    def setParent(self, parent):
        self.__parent = parent

    def getChildren(self):
        return self.__children

    def getListPlayer(self):
        return self.__list_player

    def setListPlayer(self, list):
        self.__list_player = list
    
    
        
    

    def toString(self):
        print("\n---------------")
        print(f"generation: {self.getGeneration()}")
        print(f"index_tour: {self.getIndexTour()}")
        print(f"placer_par 1:{self.getListPlayer()[0].getTebokaPoints()} score: {self.getListPlayer()[0].getScore()}")
        print(f"placer_par 2:{self.getListPlayer()[1].getTebokaPoints()} score: {self.getListPlayer()[1].getScore()}")
        print(f"place_dispo: {self.getPlaceDispo()}")
        print(f"nbr_child: {len(self.getChildren())}")
        
        print("---------------")
        with open("output.txt", "a") as file:
            file.write("\n---------------\n")
            file.write(f"generation: {self.getGeneration()}\n")
            file.write(f"index_tour: {self.getIndexTour()}\n")
            file.write(f"placer_par 1: {self.getListPlayer()[0].getTebokaPoints()} score: {self.getListPlayer()[0].getScore()}\n")
            file.write(f"placer_par 2: {self.getListPlayer()[1].getTebokaPoints()} score: {self.getListPlayer()[1].getScore()} \n")
            file.write(f"place_dispo: {self.getPlaceDispo()}\n")
            file.write(f"nbr_child: {len(self.getChildren())}\n")
            file.write("---------------\n")

    def getPlaceDispo(self):
        all_box = self.getBoxs()
        all_point_players = []
        for player in self.__list_player:
            all_point_players.extend(player.getTebokaPoints())
        all_point_dispo = []
        for box in all_box:
            if box.getPoint() not in all_point_players:
                all_point_dispo.append(box.getPoint())
                
         
        #noires       
        result  = [pt for pt in  all_point_dispo if pt not in Data.point_noires ]
        return result
        # return all_point_dispo
    

    
    def attributScore (self):
        if ( self.__list_player[self.getIndexTour()[0]].checkWin() ):
                self.__list_player[self.getIndexTour()[0]].setScore(1)
                self.__list_player[self.getIndexTour()[1]].setScore(-1)
        elif ( self.__list_player[self.getIndexTour()[1]].checkWin() ):
            self.__list_player[self.getIndexTour()[1]].setScore(1)
            self.__list_player[self.getIndexTour()[0]].setScore(-1)
        else: 
                self.__list_player[self.getIndexTour()[0]].setScore(0)
                self.__list_player[self.getIndexTour()[1]].setScore(0)
    
    def miteraka(self, depth):
        index0, index1 = self.__index_tour[0], self.__index_tour[1]
        player0 = self.__list_player[index0]
        player1 = self.__list_player[index1]

        if player0.checkWin() or player1.checkWin() or depth == Data.profondeur:
            return

        if self.getParent():
            self.__index_tour.reverse()  # évite de recréer une liste

        all_point_dispo = self.getPlaceDispo()
        print(f"place_dispo: {len(all_point_dispo)}")

        player_tour = self.__list_player[self.__index_tour[0]]
        tebokas = player_tour.getListTeboka()
        couleur = player_tour.getColor()

        has_less_than_three = len(tebokas) < 3

        for point in all_point_dispo:
            if has_less_than_three:
                new_teboka = Teboka(point=point, couleur=couleur)
                # ici, pas besoin de deep copy car le joueur a moins de 3 points
                player_tour.addTeboka(new_teboka)

                temp_node = Node(
                    self,
                    self.__list_player,  # pas de deepcopy ici
                    self.__index_tour[:],  # shallow copy ok
                    self.getBoxs(),
                    self.getGeneration() + 1,
                )

                self.addChild(temp_node)
                temp_node.miteraka(depth + 1)

                # nettoyage après appel récursif
                player_tour.getListTeboka().pop()
            else:
                for t in tebokas:
                    if Fonction.estProche(t.getPoint(), point) and point in t.getAzoAleha():
                        original = t.getPoint()
                        t.setPoint(point)

                        temp_node = Node(
                            self,
                            self.__list_player,  # toujours la même liste
                            self.__index_tour[:],
                            self.getBoxs(),
                            self.getGeneration() + 1,
                        )

                        self.addChild(temp_node)
                        temp_node.miteraka(depth + 1)

                        # rollback
                        t.setPoint(original)
       
      
